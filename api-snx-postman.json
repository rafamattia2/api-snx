{
	"info": {
		"_postman_id": "82ae3805-dd04-451c-b46a-9da12dfc812d",
		"name": "api-snx-postman",
		"description": "Post and Comments API\n\nThis RESTful API provides a complete backend solution for a media platform. It features user authentication, post management, and commenting capabilities.\n\nKey Features:\n\n- User authentication using JWT tokens\n    \n- CRUD operations for users, posts, and comments\n    \n- Pagination support for listing resources\n    \n- Protected routes requiring authentication\n    \n- Health check endpoint for monitoring\n    \n\nThe API follows RESTful principles and uses JSON for request/response formats. All protected endpoints require a valid JWT token to be included in the Authorization header using the Bearer scheme.\n\nBase URL: [http://localhost:3000](http://localhost:3000)  \nAuthentication: Bearer Token  \nContent-Type: application/json\n\nAvailable Resources:\n\n- Users: User management and authentication\n    \n- Posts: Create and manage user posts\n    \n- Comments: Interact with posts through comments\n    \n- Health: API status monitoring",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38061298"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "createUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"John Doesesse\",\r\n  \"username\": \"testuser\",\r\n  \"password\": \"testuser123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Registers a new user in the system, requiring name, username, and password."
					},
					"response": []
				},
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"testuser\",\r\n  \"password\": \"testuser123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Authenticates user and returns a JWT token for accessing protected routes."
					},
					"response": []
				},
				{
					"name": "getUserById",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Retrieves detailed information of a specific user by their ID."
					},
					"response": []
				},
				{
					"name": "getUsers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Lists all registered users in the system, with pagination support."
					},
					"response": []
				},
				{
					"name": "updateUser",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Rafael Mattia\",\r\n  \"username\": \"Confia!\",\r\n  \"password\": \"senhasegura123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Allows updating the authenticated user's profile information."
					},
					"response": []
				},
				{
					"name": "deleteUser",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						},
						"description": "Permanently removes the user account from the system."
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "listPosts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "Creates a new post in the system, associated with the authenticated user."
					},
					"response": []
				},
				{
					"name": "createPost",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"What is Lorem Ipsum?\",\r\n  \"content\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "Returns a list of all posts, with pagination support."
					},
					"response": []
				},
				{
					"name": "updatePost",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Where does it come from?\",\r\n  \"content\": \"Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"2"
							]
						},
						"description": "Allows editing the content of an existing user's post."
					},
					"response": []
				},
				{
					"name": "deletePost",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/35",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"35"
							]
						},
						"description": "Removes a specific post from the system."
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "postComments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/posts/2/comments?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"2",
								"comments"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Adds a new comment to a specific post."
					},
					"response": []
				},
				{
					"name": "createComment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"O primeiro Lorem Ipsum\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/posts/2/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"posts",
								"2",
								"comments"
							]
						},
						"description": "Lists all comments for a specific post, with pagination support."
					},
					"response": []
				},
				{
					"name": "updateComment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"Novo conteúdo do comentário\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"4"
							]
						},
						"description": "Allows editing the content of an existing comment."
					},
					"response": []
				},
				{
					"name": "deleteComment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"5"
							]
						},
						"description": "Removes a specific comment from the system."
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Checks if the API is functioning correctly, useful for monitoring."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "67310c98eed6479535c87495",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3MzEwYzk4ZWVkNjQ3OTUzNWM4NzQ5NSIsInVzZXJuYW1lIjoicmFmYW1hdHRpYSIsImlhdCI6MTczMTI2Nzc0NCwiZXhwIjoxNzMxMjcxMzQ0fQ.dqrw9cGe7wYwf1hP4mvcAH0_StE7sFTrGha99HR6ooY",
			"type": "string"
		}
	]
}